1)
 for(c=0; c<n; c++)
{
for(a=0; a<n; a++)
{
statement;
}
}

Explanation, we know from the previous lessons that 
for(c=0; c<n; c++)------- n+1 time
{
for(a=0; a<n; a++) ------- n*(n+1) time
{
statement---------- n*n time
}
}
Instead of adding all of them, you can simple use the time for the statement, which is n*n to find the time complexity.
Therefore, the time complexity is O(n^2).


2)
for(c=0; c<n; c++)
{
for(a=0; a<c; a++)
{
statement;
}
}

Explanation
Yes ----- will execute
No ---------- will not execute
step1: c starts from 0 and a starts from 0. Is a = 0 less than c= 0? No.
step2: Loop c , c++, c= 1, a = 0. Is a = 0 less than c = 1? Yes. 
step3: Loop a, a++, a = 1 and 1 is  not less than c which is also 1. So No
step4: It execute again,c++, c = 2. Then a executes for 0, 1 2 but no at 2 since a=2 is not less than c = 2
step5: c++, c =3

         c      a      number of times executed
____________________________________________________
step1:   0      0(No)           0
______________________________________________________
step2:   1      0(Yes)          1
step3:          1(No)           
_____________________________________________________
step4:   2      0(Yes)
                1(Yes)           2
                2(No)  
__________________________________________________
step5:   3       0(Yes)
                 1(Yes)          3                    
                 2 (Yes)                                                                     
                 3(No)
____________________________________________________
                 |              |
                 |              |
                 |              |
                 |              |
                 |              |
                 |              |
                 n              n
This is process will go on and on up to n

1 + 2 + 3 + ----- +n = n(n+1)/2
f(n) = (n^2 + n)/2
Time complexity is O(n^2)
