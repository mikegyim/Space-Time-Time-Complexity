b = 0;
for(a =1; b<=n; a++)
{
b = b + a;
}

Explanation
step1: initially a = 1 and b = 0, but b = b + a which implies = b = 0+1 =1
step2: a = 2, b = 1, but b = b + a which implies b = 1 + 2 = 3
and so on and on

a        b
_________________

1        0(0+1= 1)
2        1(1+2=3)
3        2(1 + 2 +3= 5)
4        3(1 + 2 + 3 + 4)
|
|
|
|
|
c   1 + 2 + 3 + 4 + ------- +c 
Why c, not n time. This is because this is not repeating for n time. It is repeating for some number of time we don't know  so we use c to represent it.
So if it is repeating for c time, what is the condition.
We assume that b has become greater than n  -----  b >n

Since b = c(c+1)/2
This implies c(c+1)/2 > n
from c(c+1)/2 > n, we assume that c^2 = n
Therefore, c = √ N
Therefore, time complexity is O(√ N)
